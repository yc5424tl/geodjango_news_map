#
# Django settings for geodjango_news_map project.
#
# Generated by 'django-admin startproject' using Django 2.2.5.
#
# For more information on this file, see
# https://docs.djangoproject.com/en/2.2/topics/settings/
#
# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/2.2/ref/settings/

import os
import dj_database_url
import django_heroku
import dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# dotenv_file = os.path.join(BASE_DIR, '.env')
# if os.path.isfile(dotenv_file):
#     dotenv.load_dotenv(dotenv_file)
#
# DJANGO_READ_DOT_ENV_FILE=True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = os.getenv('DEBUG')
DEBUG = False

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.gis',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    'geodjango_news_map_web',
    'storages',
    # 'admin_honeypot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'geodjango_news_map.middleware.BetterExceptionsMiddleware',
]

ROOT_URLCONF = 'geodjango_news_map.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'geodjango_news_map.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases'''

DATABASES = {
    'default': {
        'ENGINE':  'django.db.backends.postgresql_psycopg2',
        'NAME':     os.environ.get('NEWS_MAP_DB_NAME'),
        'USER':     os.environ.get('NEWS_MAP_DB_USER'),
        'PASSWORD': os.environ.get('NEWS_MAP_DB_PW'),
        'HOST':     os.environ.get('NEWS_MAP_DB_HOST'),
        'PORT':     os.environ.get('NEWS_MAP_DB_PORT'),
    }
}

AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',)

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



USE_S3 = os.getenv('USE_S3')

# if USE_S3:
    # aws settings
# AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
# AWS_DEFAULT_ACL  = None
# AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
# AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
# # s3 static settings
# STATIC_LOCATION = 'static'
# STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
# STATICFILES_STORAGE = 'geodjango_news_map.storage_backends.StaticStorage'
# STATIC_ROOT = STATIC_URL
# # s3 media settings
# MEDIA_LOCATION = 'media'
# MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/'
# DEFAULT_FILE_STORAGE = 'geodjango_news_map.storage_backends.MediaStorage'
# MEDIA_ROOT = MEDIA_URL
# else:
#     STATIC_URL = '/staticfiles/'
#     STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#     MEDIA_URL = '/mediafiles/'
#     MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')



AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_DEFAULT_ACL  = None
#AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
# s3 static settings
#STATIC_LOCATION = 'static'
#STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
#STATICFILES_STORAGE = 'geodjango_news_map.storage_backends.StaticStorage'
#STATIC_ROOT = STATIC_URL
# s3 media settings
#MEDIA_LOCATION = 'media'
#MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/'
#DEFAULT_FILE_STORAGE = 'geodjango_news_map.storage_backends.MediaStorage'
#MEDIA_ROOT = MEDIA_URL

STATIC_URL = os.getenv('STATIC_URL')
STATIC_ROOT = os.getenv('STATIC_ROOT')
MEDIA_URL = os.getenv('MEDIA_URL')
MEDIA_ROOT = os.getenv('MEDIA_ROOT')
DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE')
STATICFILES_STORAGE = os.getenv('STATICFILES_STORAGE')
ADMIN_MEDIA_PREFIX = os.getenv('ADMIN_MEDIA_PREFIX')


STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
## AWS_LOCATION -- "a path prefix that will be prepended to all uploads"
## possibly need to set to '/media/', but custom MediaStorage likely covers this

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'

CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = ['*']

# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_PROXY_SSL = True
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = True
# SECURE_CONTENT_TYPE_NOSNIFF = True
# SECURE_BROWSER_XXS_FILTER = True
# X_FRAME_OPTIONS = 'DENY'
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWAREDED_PROTO', 'https')
# ADMIN_HONEYPOT_EMAIL_ADMINS = False

LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'index'

BETTER_EXCEPTIONS = 1

GDAL_LIBRARY_PATH = os.environ.get('GDAL_LIBRARY_PATH')
GEOS_LIBRARY_PATH = os.environ.get('GEOS_LIBRARY_PATH')

if 'ON_HEROKU' in os.environ:
    ALLOWED_HOSTS = ['geodjango-news-map.herokuapp.com']
    DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)
    django_heroku.settings(locals(), staticfiles=False) # Activate Django-Heroku

# staticfiles=False
# if DEBUG:
#     INTERNAL_IPS = ('127.0.0.1', 'localhost')
#     MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
#     INSTALLED_APPS.append('debug_toolbar')
#     DEBUG_TOOLBAR_PANELS = [
#         'debug_toolbar.panels.versions.VersionsPanel',
#         'debug_toolbar.panels.timer.TimerPanel',
#         'debug_toolbar.panels.settings.SettingsPanel',
#         'debug_toolbar.panels.headers.HeadersPanel',
#         'debug_toolbar.panels.request.RequestPanel',
#         'debug_toolbar.panels.sql.SQLPanel',
#         'debug_toolbar.panels.staticfiles.StaticFilesPanel',
#         'debug_toolbar.panels.templates.TemplatesPanel',
#         'debug_toolbar.panels.cache.CachePanel',
#         'debug_toolbar.panels.signals.SignalsPanel',
#         'debug_toolbar.panels.logging.LoggingPanel',
#         'debug_toolbar.panels.redirects.RedirectsPanel',
#     ]
#     DEBUG_TOOLBAR_CONFIG = {
#         'INTERCEPT_REDIRECTS': False,
#         'SHOW_COLLAPSED': True,
#         'SQL_WARNING_THRESHOLD': 100,
#     }

from .logger import LOGGING